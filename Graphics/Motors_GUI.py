# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Motors2.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from Graphics.BaseClasses import MyComboBox, MyIndicator, MyLabel, MyPushButton, MyQLineEdit, MyTextBrowser, MyTextEdit
from Communication.MCG import *
from Hardware.Motors import MotorUtil, Move, CompMotor, Motor


class Ui_Motors(object):

    def __init__(self):
        super().__init__()

        self.X = Motor()
        self.Y = Motor()
        self.yaw = Motor()
        self.motor1 = Motor()
        self.motor2 = Motor()
        self.motor3 = Motor()
        self.pitch = CompMotor()
        self.roll = CompMotor()
        self.Z = CompMotor()

        self.xmove = Move()
        self.ymove = Move()
        self.zmove = Move()
        self.pitchmove = Move()
        self.rollmove = Move()
        self.yawmove = Move()

        self.movesdict = {}

        self.username = None
        self.pmac_ip = None
        self.password = None
        self.shell = Gantry() # Instantiating an object for communicating with the PMAC.
        self.util = MotorUtil() #Instantiating an object of MotorUtil class
        self.full_motorslist = []
        self.user_motorslits = []
        self.init_motors()
        self.allMotors_inited = False
        self.allMoves_inited = False

        #Timer for updating:
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_positions)
        self.timer.start(200) # updating every 200 ms

    def setupUi(self, Motors):

        Motors.setObjectName("Motors")
        Motors.resize(620, 480)
        Motors.setWindowTitle("Motors Window")
        Motors.setToolTip("")
        Motors.setStatusTip("")
        Motors.setWhatsThis("")
        Motors.setAccessibleName("")

        #Tabs
        self.centralwidget = QtWidgets.QWidget(Motors)
        self.centralwidget.setObjectName("centralwidget")
        self.MotorTabs = QtWidgets.QTabWidget(self.centralwidget)
        self.MotorTabs.setObjectName("MotorTabs")


        self.utilitieswidget = QtWidgets.QWidget()
        self.utilitieswidget.setToolTip("")
        self.utilitieswidget.setAccessibleName("")
        self.utilitieswidget.setAccessibleDescription("")
        self.utilitieswidget.setObjectName("utilitieswidget")
        self.motorwidget = QtWidgets.QWidget()
        self.motorwidget.setObjectName("motorwidget")

        self.MotorTabs.addTab(self.motorwidget, "")
        self.MotorTabs.addTab(self.utilitieswidget, "")
        self.MotorTabs.setGeometry(QtCore.QRect(0, 0, 611, 381))
        self.MotorTabs.setToolTip("")
        self.MotorTabs.setAccessibleName("")

        #Frames:
        self.system_utilities = QtWidgets.QFrame(self.utilitieswidget)
        self.system_utilities.setGeometry(QtCore.QRect(10, 0, 611, 171))
        self.system_utilities.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.system_utilities.setFrameShadow(QtWidgets.QFrame.Raised)
        self.system_utilities.setObjectName("system_utilities")

        self.motor_utilities = QtWidgets.QFrame(self.utilitieswidget)
        self.motor_utilities.setGeometry(QtCore.QRect(10, 180, 611, 171))
        self.motor_utilities.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.motor_utilities.setFrameShadow(QtWidgets.QFrame.Raised)
        self.motor_utilities.setObjectName("motor_utilities")

        # Widgets:

        self.motorsdisplay = QtWidgets.QFrame(self.motorwidget)
        self.widget = QtWidgets.QWidget(self.motorsdisplay)
        self.widget.setGeometry(QtCore.QRect(10, 0, 591, 161))
        self.widget.setObjectName("widget")
        self.motorsdisplay.setGeometry(QtCore.QRect(10, 0, 611, 171))
        self.motorsdisplay.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.motorsdisplay.setFrameShadow(QtWidgets.QFrame.Raised)
        self.motorsdisplay.setObjectName("motorsdisplay")

        self.motoractions = QtWidgets.QFrame(self.motorwidget)
        self.motoractions.setGeometry(QtCore.QRect(10, 180, 611, 171))
        self.motoractions.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.motoractions.setFrameShadow(QtWidgets.QFrame.Raised)
        self.motoractions.setObjectName("motoractions")


        self.widget1 = QtWidgets.QWidget(self.motoractions)
        self.widget1.setGeometry(QtCore.QRect(10, 60, 371, 51))
        self.widget1.setObjectName("widget1")

        self.widget2 = QtWidgets.QWidget(self.system_utilities)
        self.widget2.setGeometry(QtCore.QRect(0, 100, 471, 71))
        self.widget2.setObjectName("widget2")

        self.widget3 = QtWidgets.QWidget(self.motor_utilities)
        self.widget3.setGeometry(QtCore.QRect(4, 72, 601, 38))
        self.widget3.setObjectName("widget3")

        self.widget4 = QtWidgets.QWidget(self.centralwidget)
        self.widget4.setGeometry(QtCore.QRect(10, 380, 601, 41))
        self.widget4.setObjectName("widget4")

        #Layouts:
        self.layoutWidget = QtWidgets.QWidget(self.system_utilities)
        self.layoutWidget.setGeometry(QtCore.QRect(130, 0, 428, 101))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(30)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.layoutWidget1 = QtWidgets.QWidget(self.system_utilities)
        self.layoutWidget1.setGeometry(QtCore.QRect(0, 0, 126, 101))
        self.layoutWidget1.setObjectName("layoutWidget1")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout.setContentsMargins(10, 10, 0, 0)
        self.verticalLayout.setSpacing(50)
        self.verticalLayout.setObjectName("verticalLayout")

        self.gridLayout = QtWidgets.QGridLayout(self.widget2)
        self.gridLayout.setContentsMargins(5, 5, 5, 5)
        self.gridLayout.setHorizontalSpacing(50)
        self.gridLayout.setVerticalSpacing(10)
        self.gridLayout.setObjectName("gridLayout")

        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")

        self.bottom_layout = QtWidgets.QHBoxLayout(self.widget4)
        self.bottom_layout.setContentsMargins(0, 0, 0, 0)
        self.bottom_layout.setSpacing(10)
        self.bottom_layout.setObjectName("bottom_layout")

        #Motors Labels:

        self.x_label = MyLabel(self.widget)
        self.x_label.setObjectName("x_label")
        self.gridLayout_2.addWidget(self.x_label, 0, 0, 1, 1)

        self.y_label = MyLabel(self.widget)
        self.y_label.setObjectName("y_label")
        self.gridLayout_2.addWidget(self.y_label, 0, 1, 1, 1)

        self.z_label = MyLabel(self.widget)
        self.z_label.setObjectName("z_label")
        self.gridLayout_2.addWidget(self.z_label, 0, 2, 1, 1)

        self.pitch_label = MyLabel(self.widget)
        self.pitch_label.setObjectName("pitch_label")
        self.gridLayout_2.addWidget(self.pitch_label, 2, 0, 1, 1)

        self.roll_label = MyLabel(self.widget)
        self.roll_label.setObjectName("roll_label")
        self.gridLayout_2.addWidget(self.roll_label, 2, 1, 1, 1)

        self.yaw_label = MyLabel(self.widget)
        self.yaw_label.setObjectName("yaw_label")
        self.gridLayout_2.addWidget(self.yaw_label, 2, 2, 1, 1)

        #Motors display:

        self.x_display = MyTextBrowser(self.widget)
        self.x_display.setObjectName("x_display")
        self.gridLayout_2.addWidget(self.x_display, 1, 0, 1, 1)

        self.y_display = MyTextBrowser(self.widget)
        self.y_display.setObjectName("y_display")
        self.gridLayout_2.addWidget(self.y_display, 1, 1, 1, 1)

        self.z_display = MyTextBrowser(self.widget)
        self.z_display.setObjectName("z_display")
        self.gridLayout_2.addWidget(self.z_display, 1, 2, 1, 1)

        self.pitch_display = MyTextBrowser(self.widget)
        self.pitch_display.setObjectName("pitch_display")
        self.gridLayout_2.addWidget(self.pitch_display, 3, 0, 1, 1)

        self.roll_display = MyTextBrowser(self.widget)
        self.roll_display.setObjectName("roll_display")
        self.gridLayout_2.addWidget(self.roll_display, 3, 1, 1, 1)

        self.yaw_display = MyTextBrowser(self.widget)
        self.yaw_display.setObjectName("yaw_display")
        self.gridLayout_2.addWidget(self.yaw_display, 3, 2, 1, 1)

        self.Move_label = MyLabel(self.motoractions)
        self.Move_label.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.Move_label.setObjectName("Move_label")

        self.move_abs = QtWidgets.QRadioButton(self.motoractions)
        self.move_abs.setGeometry(QtCore.QRect(400, 50, 141, 21))
        self.move_abs.setToolTip("")
        self.move_abs.setAccessibleName("")
        self.move_abs.setObjectName("move_abs")

        self.move_rel = QtWidgets.QRadioButton(self.motoractions)
        self.move_rel.setGeometry(QtCore.QRect(400, 80, 111, 21))
        self.move_rel.setToolTip("")
        self.move_rel.setAccessibleName("")
        self.move_rel.setObjectName("move_rel")


        self.moveButton = MyPushButton(self.motoractions)
        self.moveButto.setGeometry(QtCore.QRect(220, 120, 113, 32))
        self.moveButton.setObjectName("moveButton")
        self.moveButton.clicked.connect(self.movemotor())


        self.motor_selector = MyComboBox(self.widget1)
        self.motor_selector.setObjectName("motor_selector")
        self.horizontalLayout_2.addWidget(self.motor_selector)

        self.distance = MyTextEdit(self.widget1)
        self.distance.setObjectName("distance")
        self.horizontalLayout_2.addWidget(self.distance)
        self.units = Unitslabel(self.widget1)
        self.units.setObjectName("units")
        self.horizontalLayout_2.addWidget(self.units)




        self.connect = MyPushButton(self.system_utilities)
        self.connect.setGeometry(QtCore.QRect(470, 130, 113, 32))
        self.connect.setObjectName("connect")

        #This line here below connects to the PMAC.
        self.connect.clicked.connect(self.connect2_pmac())

        self.ResetAll = MyPushButton(self.layoutWidget)
        self.ResetAll.setObjectName("ResetAll")
        self.horizontalLayout.addWidget(self.ResetAll)

        try:
            self.ResetAll.clicked.connect(MotorUtil.resetGantry))
            if not self.shell.alive:
                raise ConnectionError("No connection to PMAC")
            QtWidgets.QMessageBox.warning( "System reset!")
        except ConnectionError as e:
            QtWidgets.QMessageBox.warning(self, "Connection Error: ", str(e))

        self.HomeGantry = MyPushButton(self.layoutWidget)
        self.HomeGantry.setObjectName("HomeGantry")
        self.horizontalLayout.addWidget(self.HomeGantry)

        try:
            self.HomeGantry.clicked.connect(MotorUtil.homeGantry())
            if not self.shell.alive:
                raise ConnectionResetError("No connectoin to PMAC")
            self.sh_display.turn_green()
            QtWidgets.QMessageBox.warning("System homed!")
        except ConnectionError as e:
            QtWidgets.QMessageBox.warning(self, "Connection Error", str(e))


        self.sys_label = MyLabel(self.layoutWidget1)
        self.sys_label.setObjectName("sys_label")
        self.verticalLayout.addWidget(self.sys_label)
        self.conn_label = MyLabel(self.layoutWidget1)
        self.conn_label.setObjectName("conn_label")
        self.verticalLayout.addWidget(self.conn_label)


        self.IP_label = MyLabel(self.widget2)
        self.IP_label.setObjectName("IP_label")
        self.gridLayout.addWidget(self.IP_label, 0, 0, 1, 1)
        self.uname_label = MyLabel(self.widget2)
        self.uname_label.setObjectName("uname_label")
        self.gridLayout.addWidget(self.uname_label, 0, 1, 1, 1)
        self.pword_label = MyLabel(self.widget2)
        self.pword_label.setObjectName("pword_label")
        self.gridLayout.addWidget(self.pword_label, 0, 2, 1, 1)

        self.IP_field = MyTextEdit(self.widget2)
        self.IP_field.setToolTip("")
        self.IP_field.setInputMethodHints(QtCore.Qt.ImhNone)
        self.IP_field.setObjectName("IP_field")
        self.gridLayout.addWidget(self.IP_field, 1, 0, 1, 1)

        #This sets the pmac IPclass variable to whatever the user inputs in the IP field.
        self.pmac_ip = self.IP_field.on_enter_pressed()

        self.uname_field = MyTextEdit(self.widget2)
        self.uname_field.setObjectName("uname_field")
        self.gridLayout.addWidget(self.uname_field, 1, 1, 1, 1)

        #This sets the username class variable to whatever the user inputs in the uname field
        self.username = self.uname_field.on_enter_pressed()

        self.pword_field = MyTextEdit(self.widget2)
        self.pword_field.setObjectName("pword_field")
        self.gridLayout.addWidget(self.pword_field, 1, 2, 1, 1)

        #This sets the pword class variable to whatever the user inputs in the pword field
        self.password = self.pword_field.on_enter_pressed()

        self.mutil_label = QtWidgets.QLabel(self.motor_utilities)
        self.mutil_label.setGeometry(QtCore.QRect(10, 10, 131, 16))
        self.mutil_label.setObjectName("mutil_label")
        self.mutil_label_2 = QtWidgets.QLabel(self.motor_utilities)
        self.mutil_label_2.setGeometry(QtCore.QRect(10, 40, 131, 16))
        self.mutil_label_2.setObjectName("mutil_label_2")

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.motor_selector_2 = MyComboBox(self.widget3)
        self.motor_selector_2.setObjectName("motor_selector_2")
        self.horizontalLayout_3.addWidget(self.motor_selector_2)


        self.set_display = MyQLineEdit(self.widget3)
        self.set_display.setInputMask("")
        self.set_display.setObjectName("set_display")
        self.horizontalLayout_3.addWidget(self.set_display)

        self.label = UnitsLabel(self.widget3)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.getspeed = MyPushButton(self.widget3)

        self.getspeed.setObjectName("getspeed")
        self.horizontalLayout_3.addWidget(self.getspeed)
        self.setspeed = MyPushButton(self.widget3)
        self.setspeed.setObjectName("setspeed")
        self.horizontalLayout_3.addWidget(self.setspeed)



        self.sh_display = MyIndicator(self.widget4)
        self.sh_display.setMaximumSize(QtCore.QSize(32, 32))

        self.sh_display.setFont(font)
        self.sh_display.setText("")
        self.sh_display.setObjectName("sh_display")
        self.bottom_layout.addWidget(self.sh_display)
        self.sh_label = MyLabel(self.widget4)
        self.sh_label.setMaximumSize(QtCore.QSize(95, 16777215))

        self.sh_label.setFont(font)
        self.sh_label.setObjectName("sh_label")
        self.bottom_layout.addWidget(self.sh_label)

        self.stopButton = MyPushButton(self.widget4)
        self.stopButton.setMaximumSize(QtCore.QSize(160, 16777215))

        self.stopButton.setFont(font)
        self.stopButton.setObjectName("stopButton")
        self.bottom_layout.addWidget(self.stopButton)
        self.stopButton.clicked.connect(self.stopall())


        self.pmac_label = MyLabel(self.widget4)
        self.pmac_label.setMaximumSize(QtCore.QSize(95, 16777215))

        self.pmac_label.setFont(font)
        self.pmac_label.setObjectName("pmac_label")
        self.bottom_layout.addWidget(self.pmac_label)
        self.pmac_display = MyIndicator(self.widget4)
        self.pmac_display.setMaximumSize(QtCore.QSize(32, 32))

        self.pmac_display.setFont(font)
        self.pmac_display.setText("")
        self.pmac_display.setObjectName("pmac_display")
        self.bottom_layout.addWidget(self.pmac_display)
        Motors.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Motors)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 620, 24))
        self.menubar.setObjectName("menubar")
        Motors.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Motors)
        self.statusbar.setObjectName("statusbar")
        Motors.setStatusBar(self.statusbar)

        self.retranslateUi(Motors)
        self.MotorTabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Motors)

        #Change in units in combobox selectors displays:

        self.motor_selector.currentIndexChanged.connect(self.units.update_value)
        self.motor_selector_2.currentIndexChanged.connect(self.label.update_value)

    def retranslateUi(self, Motors):
        _translate = QtCore.QCoreApplication.translate
        self.x_label.setText(_translate("Motors", "X motor"))
        self.y_label.setText(_translate("Motors", "Y motor"))
        self.z_label.setText(_translate("Motors", "Z motor"))
        self.pitch_label.setText(_translate("Motors", "Pitch motor"))
        self.roll_label.setText(_translate("Motors", "Roll motor"))
        self.yaw_label.setText(_translate("Motors", "Yaw motor"))
        self.Move_label.setText(_translate("Motors", "Move"))
        self.move_abs.setText(_translate("Motors", "Move Absolute"))
        self.move_rel.setText(_translate("Motors", "Move Relative"))
        self.units.setText(_translate("Motors", "units"))
        self.MotorTabs.setTabText(self.MotorTabs.indexOf(self.motorwidget), _translate("Motors", "Motors"))
        self.connect.setText(_translate("Motors", "Connect"))
        self.ResetAll.setText(_translate("Motors", "Reset All"))
        self.HomeGantry.setText(_translate("Motors", "Home Gantry"))
        self.sys_label.setText(_translate("Motors", "System Utilities"))
        self.conn_label.setText(_translate("Motors", "PMAC connection"))
        self.IP_label.setText(_translate("Motors", "PMAC IP"))
        self.uname_label.setText(_translate("Motors", "Username"))
        self.pword_label.setText(_translate("Motors", "Password"))
        self.mutil_label.setText(_translate("Motors", "Motor Utilities"))
        self.mutil_label_2.setText(_translate("Motors", "Jog Speed"))
        self.label.setText(_translate("Motors", "units"))
        self.getspeed.setText(_translate("Motors", "Get Speed"))
        self.setspeed.setText(_translate("Motors", "Set Speed"))
        self.MotorTabs.setTabText(self.MotorTabs.indexOf(self.utilitieswidget), _translate("Motors", "Utilities"))
        self.sh_label.setText(_translate("Motors", "System homed"))
        self.stopButton.setText(_translate("Motors", "STOP"))
        self.moveButton.setText(_translate("Motors", "Move"))
        self.pmac_label.setText(_translate("Motors", "Pmac comms"))

    def Connect2_Pmac(self):
        """
        This method connects to the PMAC with the proper values of IP, Username and passwords
        :return:
        """

        try:

            self.shell.username = self.username
            self.shell.password = self.password
            self.shell.pmac_ip = self.pmac_ip
            if self.shell.username or self.shell.password or self.shell.pmac_ip is None:
                raise ValueError("Please input all the values")
            # this happens if username, pmac_ip and password are correct:

            self.shell.openssh()
        except ValueError as e:
            QtWidgets.QMessageBox.warning(self, "Input Error ", str(e))

        #turning the lights green
        if self.shell.alive:
            self.pmac_display.turn_green()
        try:

            self.shell.pmac_init()
            if not self.shell.isinit:
                raise ValueError ("Error initializing the PMAC!")
            self.shell.set_echo()
            QtWidgets.QMessageBox.warning(self, "PMAC correctly initialized!")

        except ValueError as e:
            QtWidgets.QMessageBox.warning(self, "ERROR!", str(e))

    def init_motors(self):
        mylist = self.util.motors()
        alan = len(mylist)

        try:
            self.motor1.connection = self.shell
            self.motor1.motorID  = mylist[0][1]
            self.motor1.cs = mylist[0][0]

            self.motor2.connection = self.shell
            self.motor2.motorID = mylist[1][1]
            self.motor2.cs = mylist[1][0]

            self.motor3.connection = self.shell
            self.motor3.motorID = mylist[2][1]
            self.motor3.cs = mylise[2][0]

            self.X.connection = self.shell
            self.X.motorID = mylist[4][1]
            self.X.cs = mylist [4][0]

            self.Y.connection = self.shell
            self.Y.motorID = mylist[5][1]
            self.Y.cs = mylist[5][0]

            self.yaw.connection = self.shell
            self.yaw.motorID = mylist [3][1]
            self.yaw.cs = mylist [3][0]

            self.Z.connection = self.shell
            self.Z.pmac_name = "Z"
            self.Z.cs = 1

            self.pitch.connection = self.shell
            self.pitch.pmac_name = "B"
            self.pitch.cs = 1

            self.roll.connection = self.shell
            self.roll.pmac_name = "A"
            self.roll.cs = 1

            if self.shell is None or self.shell.alive == False or self.shell.isinit == False:
                raise ValueError ("Pmac not connected or not correctly inited!")

            QtWidgets.QMessageBox.warning(self, "All motors correctly initialized!")
            self.allMotors_inited = True
            self.full_motorslist = [
                self.motor1,
                self.motor2,
                self.motor3,
                self.yaw,
                self.X,
                self.Y,
                self.Z,
                self.pitch,
                self.roll
            ]

            self.user_motorslits = self.set_Motorlist()
            self.init_moves()

            #Filling the data for comboboxes:

            for motor in self.user_motorslits:
                self.motor_selector_2.addItem((str(motor)))
                self.motor_selector.addItem(str(motor))

        except ValueError as e:
            QtWidgets.QMessageBox.warning(self, "ERROR!". str(e))

    def init_moves(self):
        try:
            self.xmove.connection = self.shell
            self.xmove.motor = self.X
            self.move.util = self.util

            self.ymove.connection = self.shell
            self.ymove.motor = self.Y
            self.ymove.util = self.util

            self.zmove.connection = self.shell
            self.zmove.motor = self.Z
            self.zmove.util = util

            self.pitchmove.connection = self.shell
            self.pitchmove.motor = self.pitch
            self.pitchmove.util = self.util

            self.rollmove.connection = self.shell
            self.rollmove.motor = self.roll
            self.rollmove.util = self.util

            self.yawmove.connection = self.shell
            self.yawmove.motor = self.yaw
            self.yawmove.util = self.util
            if self.shell is None or self.shell.alive == False or self.shell.isinit == False:
                raise ValueError("Pmac not connected or not correctly inited!")
            self.allMoves_inited = True
            self.movesdict = self.update_dict()
        except ValueError as e:
            QtWidgets.QMessageBox(self, "Error!", str(e))

        QtWidgets.QMessageBox.warning(self, "All moves correctly initialized!")


    def update_dict(self):
        self.movesdict = {"X": self.xmove,
                          "Y": self.ymove,
                          "Z": self.zmove,
                          "pitch": self.pitchmove,
                          "roll": self.rollmove,
                          "yaw": self.yawmove
                          }

    def set_Motorlist(self):
        self.user_motorslits = [
            self.X.motorname,
            self.Y.motorname,
            self.Z.pmac_name,
            "pitch",
            "roll",
            self.yaw.motorname
        ]

    def on_combobox_changed(self, index, MyLabel):

        if index <= 2:
            MyLabel.setText("µm")
        else if index >2:
            MyLabel.setText ("degrees")

    def update_positions(self):
        for motor in self.user_motorslits:
            motor.real_pos = self.motor.get_real_pos()

    def movemotor(self):
        motorkey = self.motor_selector.currentText()
        mot2move = self.movesdict.get(motorkey) # This should be xmove, ymove, ..., yawmove
        distance = float(self.distance.on_enter_pressed())

        if not self.move_rel.isChecked() and not self.move_abs.isChecked():
            try:
                raise ValueError("Check either Move Rel or Move Abs")
            except ValueError as e:
                QtWidgets.QMessageBox.warning(self, "Error!", str(e))

        elif self.move_rel.isChecked() and not self.move_abs.isChecked():
            mot2move.move_rel(distance = distance )

        elif not self.move_rel.isChecked() and self.move_abs.isChecked():
           mot2move.move_abs(distance = distance)

    def stopall(self):
        message = "#*kill"
        self.shell.send_message(message)
        QtWidgets.QMessageBox.warning("All motors killed")



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Motors = QtWidgets.QMainWindow()
    ui = Ui_Motors()
    ui.setupUi(Motors)
    Motors.show()
    sys.exit(app.exec_())
