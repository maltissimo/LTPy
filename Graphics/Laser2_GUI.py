# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'laser_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QVBoxLayout
from Graphics.BaseClasses import MyIndicator, MyLabel, MyPushButton, MyTextBrowser
from Communication.MCL import *
from ControlCenter.Control_Utilities import Utilities as Uti
from PyQt5.QtCore import QTimer
from Hardware.Source import *

class Ui_LaserController():

    def __init__(self):
        super().__init__()
        self.source = Uti.create("laser") # Instantiating a Source object for usage.
        self.laserON = False

        self.setupUi()

        #This updates the labels every 200 ms.
        self.timer = QTimer(self)
        self.timer.start(200)  # updating every 200 ms.
        self.timer.timeout.connect(self.update_all)

    def setupUi(self, LaserController):

        LaserController.setObjectName("LaserController")
        LaserController.resize(448, 276)
        LaserController.setWindowTitle("Obis Laser Controller")
        LaserController.setToolTip("")
        LaserController.setDockNestingEnabled(True)

        self.centralwidget = QtWidgets.QWidget(LaserController)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(220, 0, 211, 191))
        self.widget.setObjectName("widget")
        LaserController.setCentralWidget(self.centralwidget)

        self.widget1 = QtWidgets.QWidget(self.widget)
        self.widget1.setGeometry(QtCore.QRect(0, 70, 201, 41))
        self.widget1.setObjectName("widget1")

        self.widget2 = QtWidgets.QWidget(self.widget)
        self.widget2.setGeometry(QtCore.QRect(0, 24, 201, 41))
        self.widget2.setObjectName("widget2")

        #Layouts:

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget1)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        #Indicators side of things:

        self.indicators = MyLabel(self.widget)
        self.indicators.setGeometry(QtCore.QRect(40, 3, 121, 20))
        self.indicators.setObjectName("indicators")

        #Communications:

        self.comms_label = MyIndicator(self.widget2)
        self.comms_label.setObjectName("comms_label")
        self.horizontalLayout_2.addWidget(self.comms_label)
        self.comms_onoff = MyIndicator(self.widget2)
        self.comms_onoff.setText("")
        self.comms_onoff.setObjectName("comms_onoff")
        self.horizontalLayout_2.addWidget(self.comms_onoff)

        #Laser ONOFF:

        self.laser_label = MyIndicator(self.widget1)
        self.laser_label.setObjectName("laser_label")
        self.horizontalLayout.addWidget(self.laser_label)
        self.laser_onoff = MyIndicator(self.widget1)
        self.laser_onoff.setText("")
        self.laser_onoff.setObjectName("laser_onoff")
        self.horizontalLayout.addWidget(self.laser_onoff)

        #Laser Wavelength display:


        self.wavelength_label = MyLabel(self.widget)
        self.wavelength_label.setGeometry(QtCore.QRect(0, 120, 111, 20))
        self.wavelength_label.setObjectName("wavelength_label")
        self.wlength_display = MyTextBrowser(self.widget)
        self.wlength_display.setGeometry(QtCore.QRect(130, 120, 71, 21))
        self.wlength_display.setObjectName("wlength_display")

        #Laser Intensity display:

        self.int_label = MyLabel(self.widget)
        self.int_label.setGeometry(QtCore.QRect(0, 140, 111, 20))
        self.int_label.setObjectName("int_label")
        self.int_display = MyTextBrowser(self.widget)
        self.int_display.setGeometry(QtCore.QRect(130, 140, 71, 21))
        self.int_display.setObjectName("int_display")

        #laser Current display:

        self.cur_label = MyLabel(self.widget)
        self.cur_label.setGeometry(QtCore.QRect(0, 160, 111, 20))
        self.cur_label.setObjectName("cur_label")
        self.cur_display = MyTextBrowser(self.widget)
        self.cur_display.setGeometry(QtCore.QRect(130, 160, 71, 21))
        self.cur_display.setObjectName("cur_display")

        #Laser ON/OFF Button:

        self.pushButton = MyPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 50, 113, 32))
        self.pushButton.setObjectName("pushButton")

        self.pushButton.clicked.connect(self.toggle_laser())

        #Intensity Controller:

        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setGeometry(QtCore.QRect(40, 140, 111, 22))
        self.horizontalSlider.setToolTip("")
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        Layout.addWidget(self.horizontalSlider)
        self.horizontalSlider.setMinimum(self.int_low_high()[0])
        self.horizontalSlider.setMaximum(self.int_low_high()[1])
        self.horizontalSlider.setValue(self.get_actual_int())
        step = (self.int_low_high()[1] - self.int_low_high()[0]) / 100
        self.horizontalSlider.valueChanged.connect(self.source.set_power())



        self.menubar = QtWidgets.QMenuBar(LaserController)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 448, 24))
        self.menubar.setObjectName("menubar")
        LaserController.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(LaserController)
        self.statusbar.setObjectName("statusbar")
        LaserController.setStatusBar(self.statusbar)

        self.retranslateUi(LaserController)
        QtCore.QMetaObject.connectSlotsByName(LaserController)

    def update_comms_label(self):
        if self.source.serialmessage(isHSHAKE):
            self.comms_onoff.setText("ON")
            self.comms_onoff.turn_green()
        else:
            self.comms_onoff.setText("OFF")


    def update_laser_label(self):
        if self.source.isON:
            self.laser_onoff.setText("ON")
            self.laser_onoff.turn_green()
            self.laserON = True
        else:
            self.laser_onoff.setText("OFF")
            self.laserON = False

    def toggle_laser(self):
        if self.source.isON:
            self.source.serialsend(self.source.turnON(LASON))
        else:
            self.source.serialsend(self.source.turnOFF(LASON))

    def int_low_high(self):
        low = self.source.p_low_lim
        high = self.source.p_high_lim
        return ([low, high])

    def get_actual_int(self):

        return (self.source.pow_level)

    def getwlength(self):

        return (self.source.wlength)

    def curlevel(self):
        return (self.source.cur_level)

    def update_all(self):
        self.cur_display.updateValue( self.curlevel())  # updating laser current
        self.int_display.updateValue( self.get_actual_int())  # updating laser intensity
        self.wlength_display.updateValue( self.getwlength())  # updating wavelength
        self.update_comms_label()  # updating comms label
        self.update_laser_label()  # updating laser label

    def retranslateUi(self, LaserController):
        _translate = QtCore.QCoreApplication.translate
        self.indicators.setText(_translate("LaserController", "Status indicators"))
        self.wavelength_label.setText(_translate("LaserController", "Wavelength (nm)"))
        self.int_label.setText(_translate("LaserController", "Intensity (W)"))
        self.cur_label.setText(_translate("LaserController", "Current (A)"))
        self.laser_label.setText(_translate("LaserController", "Laser"))
        self.comms_label.setText(_translate("LaserController", "Comms"))
        self.pushButton.setText(_translate("LaserController", "Laser ON/OFF"))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    LaserController = QtWidgets.QMainWindow()
    ui = Ui_LaserController()
    ui.setupUi(LaserController)
    LaserController.show()
    sys.exit(app.exec_())
